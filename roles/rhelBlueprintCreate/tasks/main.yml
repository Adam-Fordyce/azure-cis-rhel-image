---
# Main tasks file for rhelBlueprintCreate role
# Variables are prefixed with "rhbc_"

- name: Create tempdir
  tempfile:
    state: directory
    suffix: blueprint
  register: rhbc_temp
  tags:
    - compose

- name: Create blueprint.toml
  template:
    src: blueprint.toml.j2
    dest: "{{ rhbc_temp.path }}/{{ image_name }}.toml"
  tags:
    - compose


- name: "Push blueprint {{ image_name }} to the ImageBuilder"
  shell: composer-cli blueprints push "{{ rhbc_temp.path }}/{{ image_name }}.toml"
  tags:
    - compose


- name: "Solve package dependencies for {{ image_name }}"
  shell: composer-cli blueprints depsolve "{{ image_name }}"
  tags:
    - compose

# TODO: add azure.toml at end of the shell command, this will allow the image to be uploaded to Azure
#
#provider = "azure"
#[settings]
#storageAccount = "your storage account name"
#storageAccessKey = "storage access key you copied in the Azure portal"
#container = "your storage container name"
#
- name: Create the the VM image
  shell: "composer-cli compose start {{ image_name }} {{ image_format }}"
  tags:
    - compose

# TODO: Poll command and wait until it is finished before proceeding
- name: Wait for image to be created
  shell: composer-cli compose status
  retries: 100
  delay: 60
  until: "'FINISHED' in rhbc_image_create.stdout_lines[0]"
  register: rhbc_image_create

- name: Get image UUID
  set_fact:
    uuid: "{{ rhbc_image_create.stdout_lines[0].split(' ')[0] }}"

# TODO: Don't assume to use /root/
- name: Check for existance of cloud image
  stat:
    path: "/root/{{ uuid }}-disk.{{ image_format }}"
  register: rhbc_image_stat

# TODO: Don't assume to use /root/
- name: Download the the VM image
  shell:
    cmd: composer-cli compose image {{ uuid }}
    chdir: "/root/"
  register: rhbc_image_get
  when: "rhbc_image_stat.stat.exists == false"

- name: Move the new image to the expected location
  copy:
    src: "/root/{{ uuid }}-disk.{{ image_format }}"
    dest: "{{ rawimage_dest }}"
    remote_src: yes
  tags:
    - compose

- name: Remove downloaded image
  file:
    path: "{{ uuid }}-disk.{{ image_format }}"
    state: absent

- name: Remove tempdir
  file:
    path: "{{ rhbc_temp.path }}"
    state: absent
  tags:
    - compose

...
